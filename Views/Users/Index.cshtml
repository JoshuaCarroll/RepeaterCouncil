@using RepeaterCouncil.ViewModels
@model UserIndexViewModel
@{
    // Get the current page size from ViewData, defaulting to 10 if it's not available
    int currentPageSize = ViewData["CurrentPageSize"] != null ? (int)ViewData["CurrentPageSize"] : 10;

    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Users</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>

<!-- Search Form -->
<form asp-action="Index" method="get">
    <div class="form-group">
        <label for="searchTerm">Search</label>
        <input type="text" id="searchTerm" name="searchTerm" value="@Model.SearchTerm" class="form-control" placeholder="Search by FullName, Callsign, Email" />
    </div>

    <div class="form-group">
        <label for="pageSize">Records per page:</label>
        <select id="pageSize" name="pageSize" class="form-control" onchange="this.form.submit()">
            @for (int i = 5; i < 50; i = i * 2)
            {
                string selected = currentPageSize == i ? "selected" : "";
                <!option value="@i" @(selected)>@i</!option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Search</button>
</form>

@if (Model.Users.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    Callsign
                </th>
                <th>
                    Name
                </th>
                <th>
                    Email
                </th>
                <th>
                    Last Login
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
    @foreach (var item in Model.Users) {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Callsign)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FullName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastLogin)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.ID">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
                </td>
            </tr>
    }
        </tbody>
    </table>

    <!-- Pagination Controls -->
    <nav aria-label="Page navigation">
        <ul class="pagination">
            @if (Model.HasPreviousPage)
            {
                <li class="page-item">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage - 1)" asp-route-pageSize="@Model.PageSize">Previous</a>
                </li>
            }

            <!-- Display the range of pages -->
            @for (int i = Model.CurrentPage - 2; i <= Model.CurrentPage + 2; i++)
            {
                if (i > 0 && i <= Model.TotalPages)
                {
                    if (i == Model.CurrentPage)
                    {
                        <li class="page-item active"><span class="page-link">@i</span></li>
                    }
                    else
                    {
                        <li class="page-item">
                            <a class="page-link" asp-action="Index" asp-route-pageNumber="@i" asp-route-pageSize="@Model.PageSize">@i</a>
                        </li>
                    }
                }
            }

            @if (Model.HasNextPage)
            {
                <li class="page-item">
                    <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.CurrentPage + 1)" asp-route-pageSize="@Model.PageSize">Next</a>
                </li>
            }
        </ul>
    </nav>
}
else
{
    <p>No users to display. Please use the search form to find users.</p>
}