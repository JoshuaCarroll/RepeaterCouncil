// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using RepeaterCouncil.Data;

#nullable disable

namespace RepeaterCouncil.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241003135228_PostUserIdUpdate")]
    partial class PostUserIdUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RepeaterCouncil.Models.AutopatchOption", b =>
                {
                    b.Property<byte>("ID")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("ID");

                    b.ToTable("AutopatchOptions");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.BusinessRulesFrequency", b =>
                {
                    b.Property<decimal?>("FrequencyEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(12, 6)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<decimal>("FrequencyStart")
                        .HasColumnType("decimal(12, 6)");

                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("SeparationMiles")
                        .HasColumnType("int");

                    b.Property<decimal>("SpacingMhz")
                        .HasColumnType("decimal(5, 3)");

                    b.Property<string>("StateAbbreviation")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.ToTable("BusinessRulesFrequencies");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.EmailQueue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<string>("FromEmail")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("hiram@repeatercouncil.org");

                    b.Property<string>("FromName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("Repeater Council (automated)");

                    b.Property<DateTime?>("Sent")
                        .HasColumnType("datetime");

                    b.Property<string>("Subject")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("TemplateID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("ToEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ToName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.ToTable("EmailQueue", (string)null);
                });

            modelBuilder.Entity("RepeaterCouncil.Models.EventLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("jsonData")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("ID")
                        .HasName("PK_ErrorLog");

                    b.ToTable("EventLog", (string)null);
                });

            modelBuilder.Entity("RepeaterCouncil.Models.Frequency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Band")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("Input")
                        .HasColumnType("decimal(9, 4)");

                    b.Property<decimal?>("Output")
                        .HasColumnType("decimal(9, 4)");

                    b.HasKey("ID");

                    b.ToTable("Frequencies");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.Key", b =>
                {
                    b.Property<string>("Key1")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Key");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.Link", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Comment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int>("LinkFromRepeaterID")
                        .HasColumnType("int");

                    b.Property<int>("LinkToRepeaterID")
                        .HasColumnType("int");

                    b.Property<int?>("LinkTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("ID");

                    b.HasIndex("LinkFromRepeaterID");

                    b.HasIndex("LinkToRepeaterID");

                    b.HasIndex("LinkTypeID");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.LinkType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("LinkType1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LinkType");

                    b.HasKey("ID");

                    b.ToTable("LinkTypes");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.Permission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("RepeaterId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ID")
                        .HasName("PK__Permissi__3214EC273694552F");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("RepeaterId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.ProposedCoordinationAnswer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID")
                        .HasName("PK__Proposed__3214EC27E392A2E4");

                    b.ToTable("ProposedCoordinationAnswers");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.ProposedCoordinationsLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Answer")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Geometry>("Location")
                        .HasColumnType("geography");

                    b.Property<decimal>("ReceiveFrequency")
                        .HasColumnType("decimal(12, 6)");

                    b.Property<int>("RequestedByUserID")
                        .HasColumnType("int");

                    b.Property<decimal>("TransmitFrequency")
                        .HasColumnType("decimal(12, 6)");

                    b.HasKey("ID")
                        .HasName("PK__Proposed__3214EC27717CDC1F");

                    b.HasIndex("Answer");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("ProposedCoordinationsLog", (string)null);
                });

            modelBuilder.Entity("RepeaterCouncil.Models.Repeater", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal?>("AMSL")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<bool?>("ARES")
                        .HasColumnType("bit");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("text");

                    b.Property<string>("Analog_InputAccess")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)");

                    b.Property<string>("Analog_OutputAccess")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)");

                    b.Property<decimal?>("Analog_Width")
                        .HasColumnType("decimal(6, 3)");

                    b.Property<decimal?>("AntennaGain")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal?>("AntennaHeight")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<byte?>("Autopatch")
                        .HasColumnType("tinyint");

                    b.Property<string>("Callsign")
                        .IsRequired()
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)");

                    b.Property<string>("City")
                        .HasMaxLength(24)
                        .IsUnicode(false)
                        .HasColumnType("varchar(24)");

                    b.Property<decimal?>("CoordinatedAntennaHeight")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Geometry>("CoordinatedLocation")
                        .HasColumnType("geography");

                    b.Property<int?>("CoordinatedOutputPower")
                        .HasColumnType("int");

                    b.Property<string>("CoordinatorComments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("DMR_ColorCode")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("DMR_ID")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DMR_Network")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DSTAR_Module")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<DateTime?>("DateConstruction")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCoordinated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateCoordinationSource")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDecoordinated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("ERP")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<bool?>("EmergencyPower")
                        .HasColumnType("bit");

                    b.Property<bool?>("Experimental")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("InputFrequency")
                        .HasColumnType("decimal(12, 6)");

                    b.Property<string>("LegacyMetadata")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<bool?>("LicenseExpired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("LicenseeSK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("Linked")
                        .HasColumnType("bit");

                    b.Property<Geometry>("Location")
                        .HasColumnType("geography");

                    b.Property<string>("NXDN_RAN")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("OutputFrequency")
                        .HasColumnType("decimal(12, 6)");

                    b.Property<int?>("OutputPower")
                        .HasColumnType("int");

                    b.Property<string>("P25_NAC")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.Property<bool?>("RACES")
                        .HasColumnType("bit");

                    b.Property<string>("SiteName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Sponsor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("State")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("TrusteeID")
                        .HasColumnType("int");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<bool?>("Weather")
                        .HasColumnType("bit");

                    b.Property<bool?>("WideArea")
                        .HasColumnType("bit");

                    b.Property<string>("YSF_DSQ")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<decimal?>("_Latitude")
                        .HasColumnType("decimal(10, 7)");

                    b.Property<decimal?>("_Longitude")
                        .HasColumnType("decimal(10, 7)");

                    b.Property<int?>("_OldID")
                        .HasColumnType("int");

                    b.Property<int?>("_TrusteeOldID")
                        .HasColumnType("int");

                    b.HasKey("ID")
                        .HasName("PK__Repeater__3214EC2743D1A15A");

                    b.HasIndex("Autopatch");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex(new[] { "IdentityUserId" }, "Index_TrusteeID");

                    b.ToTable("Repeaters");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.RepeaterChangeLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("ChangeDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ChangeDescription")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RepeaterId")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("RepeaterId");

                    b.ToTable("RepeaterChangeLogs");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.RepeaterStatus", b =>
                {
                    b.Property<byte>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("ID"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("ID");

                    b.ToTable("RepeaterStatuses");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.RepeaterType", b =>
                {
                    b.Property<byte>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("ID"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("ID");

                    b.ToTable("RepeaterTypes");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.Request", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("Altitude")
                        .HasColumnType("int");

                    b.Property<int?>("AntennaHeight")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ClosedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Geometry>("Location")
                        .HasColumnType("geography");

                    b.Property<decimal?>("OutputFrequency")
                        .HasColumnType("decimal(12, 6)");

                    b.Property<int?>("OutputPower")
                        .HasColumnType("int");

                    b.Property<int?>("RepeaterID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RequestedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("State")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("RepeaterID");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.RequestNote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("IdentityUserId");

                    b.HasIndex("RequestID");

                    b.ToTable("RequestNotes");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.RequestStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("ID");

                    b.ToTable("RequestStatuses");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.RequestWorkflow", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("LastReminderSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("Note")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("RequestID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RequestedTimeStamp")
                        .HasColumnType("datetime");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime");

                    b.Property<string>("UrlKey")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("char(128)")
                        .HasDefaultValueSql("(NULL)")
                        .IsFixedLength();

                    b.HasKey("ID");

                    b.HasIndex("RequestID");

                    b.HasIndex("StatusID");

                    b.ToTable("RequestWorkflows");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.State", b =>
                {
                    b.Property<string>("State1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("State");

                    b.Property<Geometry>("Borders")
                        .HasColumnType("geography");

                    b.Property<string>("CoordinatorEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("PopulatedInDatabase")
                        .HasColumnType("bit");

                    b.Property<string>("StateAbbreviation")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("website")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValueSql("(NULL)");

                    b.HasKey("State1")
                        .HasName("PK__States__BA803DACF4C6B60B");

                    b.HasIndex(new[] { "State1" }, "pk_States")
                        .IsUnique();

                    b.ToTable("States");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.User", b =>
                {
                    b.Property<string>("IdentityUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Callsign")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("City")
                        .HasMaxLength(24)
                        .IsUnicode(false)
                        .HasColumnType("varchar(24)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime");

                    b.Property<bool?>("LicenseExpired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("OldID")
                        .HasColumnType("int");

                    b.Property<byte[]>("Password")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8000)
                        .HasColumnType("varbinary(8000)")
                        .HasDefaultValueSql("(NULL)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCell")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PhoneHome")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneWork")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<bool?>("SK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ZIP")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("IdentityUserId");

                    b.HasIndex("ID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RepeaterCouncil.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RepeaterCouncil.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepeaterCouncil.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RepeaterCouncil.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RepeaterCouncil.Models.Link", b =>
                {
                    b.HasOne("RepeaterCouncil.Models.Repeater", "LinkFromRepeater")
                        .WithMany("LinkLinkFromRepeaters")
                        .HasForeignKey("LinkFromRepeaterID")
                        .IsRequired()
                        .HasConstraintName("FK_Links_LinkFromRepeaterID");

                    b.HasOne("RepeaterCouncil.Models.Repeater", "LinkToRepeater")
                        .WithMany("LinkLinkToRepeaters")
                        .HasForeignKey("LinkToRepeaterID")
                        .IsRequired()
                        .HasConstraintName("FK_Links_LinkToRepeaterID");

                    b.HasOne("RepeaterCouncil.Models.LinkType", "LinkType")
                        .WithMany("Links")
                        .HasForeignKey("LinkTypeID")
                        .HasConstraintName("FK_Links_LinkTypeID");

                    b.Navigation("LinkFromRepeater");

                    b.Navigation("LinkToRepeater");

                    b.Navigation("LinkType");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.Permission", b =>
                {
                    b.HasOne("RepeaterCouncil.Models.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Permissions_UserId");

                    b.HasOne("RepeaterCouncil.Models.Repeater", "Repeater")
                        .WithMany("Permissions")
                        .HasForeignKey("RepeaterId")
                        .HasConstraintName("FK_Permissions_RepeaterId");

                    b.Navigation("Repeater");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.ProposedCoordinationsLog", b =>
                {
                    b.HasOne("RepeaterCouncil.Models.ProposedCoordinationAnswer", "AnswerNavigation")
                        .WithMany("ProposedCoordinationsLogs")
                        .HasForeignKey("Answer")
                        .IsRequired()
                        .HasConstraintName("FK_ProposedCoordinationsLog_Answer");

                    b.HasOne("RepeaterCouncil.Models.User", "RequestedByUser")
                        .WithMany("ProposedCoordinationsLogs")
                        .HasForeignKey("IdentityUserId")
                        .IsRequired()
                        .HasConstraintName("FK_ProposedCoordinationsLog_RequestedByUserId");

                    b.Navigation("AnswerNavigation");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.Repeater", b =>
                {
                    b.HasOne("RepeaterCouncil.Models.AutopatchOption", "AutopatchNavigation")
                        .WithMany("Repeaters")
                        .HasForeignKey("Autopatch")
                        .HasConstraintName("FK_Repeaters_Autopatch");

                    b.HasOne("RepeaterCouncil.Models.User", "Trustee")
                        .WithMany("Repeaters")
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Repeaters_TrusteeID");

                    b.HasOne("RepeaterCouncil.Models.RepeaterStatus", "StatusNavigation")
                        .WithMany("Repeaters")
                        .HasForeignKey("Status")
                        .IsRequired()
                        .HasConstraintName("FK_Repeaters_Status");

                    b.HasOne("RepeaterCouncil.Models.RepeaterType", "TypeNavigation")
                        .WithMany("Repeaters")
                        .HasForeignKey("Type")
                        .IsRequired()
                        .HasConstraintName("FK_Repeaters_Type");

                    b.Navigation("AutopatchNavigation");

                    b.Navigation("StatusNavigation");

                    b.Navigation("Trustee");

                    b.Navigation("TypeNavigation");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.RepeaterChangeLog", b =>
                {
                    b.HasOne("RepeaterCouncil.Models.User", "User")
                        .WithMany("RepeaterChangeLogs")
                        .HasForeignKey("IdentityUserId")
                        .IsRequired()
                        .HasConstraintName("FK_RepeaterChangeLogs_UserId");

                    b.HasOne("RepeaterCouncil.Models.Repeater", "Repeater")
                        .WithMany("RepeaterChangeLogs")
                        .HasForeignKey("RepeaterId")
                        .IsRequired()
                        .HasConstraintName("FK_RepeaterChangeLogs_RepeaterId");

                    b.Navigation("Repeater");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.Request", b =>
                {
                    b.HasOne("RepeaterCouncil.Models.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Requests_UserID");

                    b.HasOne("RepeaterCouncil.Models.Repeater", "Repeater")
                        .WithMany("Requests")
                        .HasForeignKey("RepeaterID")
                        .HasConstraintName("FK_Requests_RepeaterID");

                    b.Navigation("Repeater");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.RequestNote", b =>
                {
                    b.HasOne("RepeaterCouncil.Models.User", "User")
                        .WithMany("RequestNotes")
                        .HasForeignKey("IdentityUserId")
                        .IsRequired()
                        .HasConstraintName("FK_RequestNotes_UserID");

                    b.HasOne("RepeaterCouncil.Models.Request", "Request")
                        .WithMany("RequestNotes")
                        .HasForeignKey("RequestID")
                        .IsRequired()
                        .HasConstraintName("FK_RequestNotes_RequestID");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.RequestWorkflow", b =>
                {
                    b.HasOne("RepeaterCouncil.Models.Request", "Request")
                        .WithMany("RequestWorkflows")
                        .HasForeignKey("RequestID")
                        .IsRequired()
                        .HasConstraintName("FK_RequestWorkflows_RequestID");

                    b.HasOne("RepeaterCouncil.Models.RequestStatus", "Status")
                        .WithMany("RequestWorkflows")
                        .HasForeignKey("StatusID")
                        .HasConstraintName("FK_RequestWorkflows_StatusID");

                    b.Navigation("Request");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.AutopatchOption", b =>
                {
                    b.Navigation("Repeaters");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.LinkType", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.ProposedCoordinationAnswer", b =>
                {
                    b.Navigation("ProposedCoordinationsLogs");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.Repeater", b =>
                {
                    b.Navigation("LinkLinkFromRepeaters");

                    b.Navigation("LinkLinkToRepeaters");

                    b.Navigation("Permissions");

                    b.Navigation("RepeaterChangeLogs");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.RepeaterStatus", b =>
                {
                    b.Navigation("Repeaters");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.RepeaterType", b =>
                {
                    b.Navigation("Repeaters");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.Request", b =>
                {
                    b.Navigation("RequestNotes");

                    b.Navigation("RequestWorkflows");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.RequestStatus", b =>
                {
                    b.Navigation("RequestWorkflows");
                });

            modelBuilder.Entity("RepeaterCouncil.Models.User", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("ProposedCoordinationsLogs");

                    b.Navigation("RepeaterChangeLogs");

                    b.Navigation("Repeaters");

                    b.Navigation("RequestNotes");

                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
